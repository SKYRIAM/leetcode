/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *q=l1;
        ListNode *p=l2;
        ListNode *l3=new ListNode(0);
        ListNode *head=l3;
        head->val=0;
        int carry=0;   //用来保存进位
        
        while(q && p)  
        {
            if(q->val + p->val + carry>= 10)   
            {
                
                head->next=new ListNode(q->val+p->val-10 + carry); //head->val不存放数据，存放在head->next->val中
                carry=1;
                
            }
            else
            {
                head->next=new ListNode(q->val+p->val+carry);
                carry=0;
            }
            head=head->next;   //指向下一位
            q=q->next;
            p=p->next;
        }
        
        while(q)   //当l1的位数大于l2时
        {
            int value=carry+q->val;
            carry=value>=10?1:0;
            value=carry==0?value:value-10;
            head->next=new ListNode(value);
            head=head->next;
            q=q->next;
        }
        
        while(p) //当l2的位数大于l1时
        { int value=carry+p->val;
            carry=value>=10?1:0;
            value=carry==0?value:value-10;
            head->next=new ListNode(value);
            head=head->next;
            p=p->next;
        }
        
        if(carry) //如果最后还有进位
            head->next=new ListNode(carry);
        return l3->next;
        }
};

